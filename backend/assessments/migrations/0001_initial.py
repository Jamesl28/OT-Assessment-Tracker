# Generated by Django 5.0.14 on 2025-10-07 00:52

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BarthelAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assessment_date', models.DateField(db_index=True, help_text='Date the assessment was conducted')),
                ('total_score', models.IntegerField(blank=True, help_text='Total assessment score (calculated)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Clinical notes and observations')),
                ('goals', models.TextField(blank=True, help_text='Treatment goals based on this assessment')),
                ('recommendations', models.TextField(blank=True, help_text='Clinical recommendations')),
                ('is_complete', models.BooleanField(default=True, help_text='Assessment is complete and finalized')),
                ('is_baseline', models.BooleanField(default=False, help_text='This is a baseline/initial assessment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feeding', models.IntegerField(choices=[(0, 'Unable'), (5, 'Needs help (e.g., cutting, spreading butter)'), (10, 'Independent')], help_text='Feeding ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('bathing', models.IntegerField(choices=[(0, 'Dependent'), (5, 'Independent (or in shower)')], help_text='Bathing ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('grooming', models.IntegerField(choices=[(0, 'Needs help with personal care'), (5, 'Independent (face/hair/teeth/shaving)')], help_text='Grooming ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('dressing', models.IntegerField(choices=[(0, 'Dependent'), (5, 'Needs help but can do about half unaided'), (10, 'Independent (including buttons, zips, laces)')], help_text='Dressing ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('bowels', models.IntegerField(choices=[(0, 'Incontinent (or needs enema)'), (5, 'Occasional accident'), (10, 'Continent')], help_text='Bowel control', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('bladder', models.IntegerField(choices=[(0, 'Incontinent or catheterized and unable to manage alone'), (5, 'Occasional accident'), (10, 'Continent')], help_text='Bladder control', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('toilet_use', models.IntegerField(choices=[(0, 'Dependent'), (5, 'Needs some help, but can do something alone'), (10, 'Independent (on and off, dressing, wiping)')], help_text='Toilet use ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('transfers', models.IntegerField(choices=[(0, 'Unable - no sitting balance'), (5, 'Major help (1-2 people, physical), can sit'), (10, 'Minor help (verbal or physical)'), (15, 'Independent')], help_text='Transfer ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('mobility', models.IntegerField(choices=[(0, 'Immobile or < 50 yards'), (5, 'Wheelchair independent, including corners, > 50 yards'), (10, 'Walks with help of one person (verbal or physical) > 50 yards'), (15, 'Independent (but may use aid) for > 50 yards')], help_text='Mobility ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('stairs', models.IntegerField(choices=[(0, 'Unable'), (5, 'Needs help (verbal, physical, carrying aid)'), (10, 'Independent')], help_text='Stair climbing ability', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('assessed_by', models.ForeignKey(help_text='Therapist who conducted the assessment', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_conducted', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(help_text='Patient being assessed', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assessments', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Barthel Index Assessment',
                'verbose_name_plural': 'Barthel Index Assessments',
                'db_table': 'assessments_barthel',
                'indexes': [models.Index(fields=['patient', 'assessment_date'], name='assessments_patient_e0191d_idx'), models.Index(fields=['assessment_date', 'is_baseline'], name='assessments_assessm_106764_idx')],
            },
        ),
        migrations.CreateModel(
            name='FIMAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assessment_date', models.DateField(db_index=True, help_text='Date the assessment was conducted')),
                ('total_score', models.IntegerField(blank=True, help_text='Total assessment score (calculated)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Clinical notes and observations')),
                ('goals', models.TextField(blank=True, help_text='Treatment goals based on this assessment')),
                ('recommendations', models.TextField(blank=True, help_text='Clinical recommendations')),
                ('is_complete', models.BooleanField(default=True, help_text='Assessment is complete and finalized')),
                ('is_baseline', models.BooleanField(default=False, help_text='This is a baseline/initial assessment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('eating', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Eating', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('grooming', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Grooming', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('bathing', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Bathing', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('dressing_upper', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Dressing - Upper Body', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('dressing_lower', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Dressing - Lower Body', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('toileting', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Toileting', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('bladder_management', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Bladder Management', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('bowel_management', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Bowel Management', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('transfer_bed_chair', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Transfer: Bed, Chair, Wheelchair', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('transfer_toilet', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Transfer: Toilet', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('transfer_tub_shower', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Transfer: Tub or Shower', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('locomotion_walk_wheelchair', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Locomotion: Walk/Wheelchair', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('locomotion_stairs', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Locomotion: Stairs', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('comprehension', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Comprehension', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('expression', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Expression', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('social_interaction', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Social Interaction', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('problem_solving', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Problem Solving', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('memory', models.IntegerField(choices=[(1, '1 - Total Assistance (<25%)'), (2, '2 - Maximal Assistance (25-49%)'), (3, '3 - Moderate Assistance (50-74%)'), (4, '4 - Minimal Assistance (75%+)'), (5, '5 - Supervision/Setup'), (6, '6 - Modified Independence (device)'), (7, '7 - Complete Independence')], help_text='Memory', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('assessed_by', models.ForeignKey(help_text='Therapist who conducted the assessment', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_conducted', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(help_text='Patient being assessed', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assessments', to='patients.patient')),
            ],
            options={
                'verbose_name': 'FIM Assessment',
                'verbose_name_plural': 'FIM Assessments',
                'db_table': 'assessments_fim',
                'indexes': [models.Index(fields=['patient', 'assessment_date'], name='assessments_patient_f555f3_idx'), models.Index(fields=['assessment_date', 'is_baseline'], name='assessments_assessm_02bfac_idx')],
            },
        ),
        migrations.CreateModel(
            name='KatzADLAssessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assessment_date', models.DateField(db_index=True, help_text='Date the assessment was conducted')),
                ('total_score', models.IntegerField(blank=True, help_text='Total assessment score (calculated)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Clinical notes and observations')),
                ('goals', models.TextField(blank=True, help_text='Treatment goals based on this assessment')),
                ('recommendations', models.TextField(blank=True, help_text='Clinical recommendations')),
                ('is_complete', models.BooleanField(default=True, help_text='Assessment is complete and finalized')),
                ('is_baseline', models.BooleanField(default=False, help_text='This is a baseline/initial assessment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bathing', models.IntegerField(choices=[(0, 'Dependent'), (1, 'Independent')], help_text='Bathing: 0=Dependent, 1=Independent', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('dressing', models.IntegerField(choices=[(0, 'Dependent'), (1, 'Independent')], help_text='Dressing: 0=Dependent, 1=Independent', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('toileting', models.IntegerField(choices=[(0, 'Dependent'), (1, 'Independent')], help_text='Toileting: 0=Dependent, 1=Independent', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('transferring', models.IntegerField(choices=[(0, 'Dependent'), (1, 'Independent')], help_text='Transferring: 0=Dependent, 1=Independent', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('continence', models.IntegerField(choices=[(0, 'Dependent'), (1, 'Independent')], help_text='Continence: 0=Dependent, 1=Independent', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('feeding', models.IntegerField(choices=[(0, 'Dependent'), (1, 'Independent')], help_text='Feeding: 0=Dependent, 1=Independent', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('assessed_by', models.ForeignKey(help_text='Therapist who conducted the assessment', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_conducted', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(help_text='Patient being assessed', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assessments', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Katz ADL Assessment',
                'verbose_name_plural': 'Katz ADL Assessments',
                'db_table': 'assessments_katz_adl',
                'indexes': [models.Index(fields=['patient', 'assessment_date'], name='assessments_patient_3ebcb8_idx'), models.Index(fields=['assessment_date', 'is_baseline'], name='assessments_assessm_0ed096_idx')],
            },
        ),
    ]
