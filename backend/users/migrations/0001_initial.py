# Generated by Django 5.0.14 on 2025-10-06 20:37

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, help_text="User's email address (used for login)", max_length=255, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('username', models.CharField(db_index=True, help_text='Unique username', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Username can only contain letters, numbers, and @/./+/-/_ characters', regex='^[\\w.@+-]+$')])),
                ('first_name', models.CharField(help_text='First name', max_length=150)),
                ('last_name', models.CharField(help_text='Last name', max_length=150)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('ot', 'Occupational Therapist'), ('ota', 'Occupational Therapy Assistant'), ('supervisor', 'Supervisor'), ('viewer', 'Viewer (Read-only)')], db_index=True, default='viewer', help_text="User's role in the organization", max_length=50)),
                ('license_number', models.CharField(blank=True, help_text='Professional license number', max_length=50)),
                ('license_state', models.CharField(blank=True, help_text='State where license was issued (e.g., CA, NY)', max_length=2, validators=[django.core.validators.RegexValidator(message='License state must be a 2-letter uppercase state code', regex='^[A-Z]{2}$')])),
                ('license_expiry_date', models.DateField(blank=True, help_text='License expiration date', null=True)),
                ('npi_number', models.CharField(blank=True, help_text='National Provider Identifier (10 digits)', max_length=10, validators=[django.core.validators.RegexValidator(message='NPI number must be exactly 10 digits', regex='^\\d{10}$')])),
                ('department', models.CharField(blank=True, help_text='Department or unit', max_length=100)),
                ('specialization', models.CharField(choices=[('geriatrics', 'Geriatrics'), ('pediatrics', 'Pediatrics'), ('neuro', 'Neurology'), ('orthopedic', 'Orthopedic'), ('hand', 'Hand Therapy'), ('general', 'General Practice')], default='general', help_text='Clinical specialization', max_length=50)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='User account is active')),
                ('is_staff', models.BooleanField(default=False, help_text='User can access admin site')),
                ('is_verified', models.BooleanField(default=False, help_text='Email has been verified')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Account locked until this time (null if not locked)', null=True)),
                ('password_last_changed', models.DateTimeField(blank=True, help_text='When password was last changed', null=True)),
                ('password_must_change', models.BooleanField(default=False, help_text='Force user to change password on next login')),
                ('last_login', models.DateTimeField(blank=True, help_text='Last successful login', null=True)),
                ('last_activity', models.DateTimeField(blank=True, help_text='Last activity timestamp (for session timeout)', null=True)),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Two-factor authentication is enabled')),
                ('two_factor_secret', models.CharField(blank=True, help_text='2FA secret key (encrypted)', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['last_name', 'first_name'],
                'indexes': [models.Index(fields=['email', 'is_active'], name='users_email_a7cfd1_idx'), models.Index(fields=['role', 'is_active'], name='users_role_a8f2ba_idx'), models.Index(fields=['last_activity'], name='users_last_ac_a9fd4f_idx')],
            },
        ),
    ]
